int main void{int i, corner_count = 150;IplImage *img_res1, *img_res2, *img_src_nb;IplImage *img_eig, *img_tmp;CvPoint2D32f *corners;//Fichiers imagechar imagePath[256] = "../ImageMatchingImages/graffiti/img6.ppm";char imageResPath1[256] = "../ImageMatchingImages/bikes/img6Eigen.jpg";char imageResPath2[256] = "../ImageMatchingImages/bikes/img6Harriss.jpg";img_res1 = cvLoadImage(imagePath);img_res2 = cvCloneImage(img_res1);img_src_nb = cvLoadImage(imagePath, CV_LOAD_IMAGE_GRAYSCALE);img_eig = cvCreateImage(cvGetSize(img_src_nb), IPL_DEPTH_32F, 1);img_tmp = cvCreateImage(cvGetSize(img_src_nb), IPL_DEPTH_32F, 1);corners = (CvPoint2D32f *) cvAlloc(corner_count * sizeof (Cv-Point2D32f));// Points d'intérêt en utilisant cvCornerMinEigenValcvGoodFeaturesToTrack(img_src_nb, img_eig, img_tmp, corners,&corner_count, 0.1, 15);cvFindCornerSubPix(img_src_nb, corners, corner_count,cvSize(3, 3), cvSize(-1, -1), cvTermCriteria(CV_TERMCRIT_ITER |CV_TERMCRIT_EPS, 20, 0.03));
// Encerclage des différents points d'intérêtfor (i = 0; i < corner_count; i++)cvCircle(img_res1, cvPointFrom32f(corners[i]), 3, CV_RGB(255, 0,0), 2);// Points d'intérêt en utilisant la méthode de Harriscorner_count = 150;cvGoodFeaturesToTrack(img_src_nb, img_eig, img_tmp, corners,&corner_count, 0.1, 15, NULL, 3, 1, 0.01);cvFindCornerSubPix(img_src_nb, corners, corner_count,cvSize(3, 3), cvSize(-1, -1), cvTermCriteria(CV_TERMCRIT_ITER |CV_TERMCRIT_EPS, 20, 0.03));
// Encerclage des différents points d'intérêtsfor (i = 0; i < corner_count; i++)cvCircle(img_res2, cvPointFrom32f(corners[i]), 3, CV_RGB(0, 0,255), 2);// Sauvegarder résultatscvSaveImage(imageResPath1, img_res1);cvSaveImage(imageResPath2, img_res2);cvReleaseImage(&img_res1);cvReleaseImage(&img_res2);cvReleaseImage(&img_eig);cvReleaseImage(&img_tmp);cvReleaseImage(&img_src_nb);return 0;}